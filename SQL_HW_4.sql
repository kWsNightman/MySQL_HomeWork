/*
1) Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем.
2) Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения в формате "20.10.2017 8:10". 
		Необходимо преобразовать поля к типу DATETIME, сохранив введеные ранее значения.
3)В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы. 
		Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения значения value. Однако, нулевые запасы должны выводиться в конце, после всех записей.
4) (по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. Месяцы заданы в виде списка английских названий ('may', 'august')
5) (по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. SELECT * FROM catalogs WHERE id IN (5, 1, 2); Отсортируйте записи в порядке, заданном в списке IN.

*/

USE shop;
-- 1) Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем.
UPDATE users
SET CREATED_AT = CURRENT_TIMESTAMP, 
	UPDATED_AT = CURRENT_TIMESTAMP;

/* 2) Таблица users была неудачно спроектирована. Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения в формате "20.10.2017 8:10". 
		Необходимо преобразовать поля к типу DATETIME, сохранив введеные ранее значения.*/
UPDATE users SET created_at = STR_TO_DATE(created_at, "%d.%m.%Y %k:%i");
ALTER TABLE users MODIFY created_at DATETIME;

/* 3)В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы. 
		Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения значения value. Однако, нулевые запасы должны выводиться в конце, после всех записей.*/
SELECT VALUE FROM storehouses_products ORDER BY CASE WHEN value > 0 THEN 0 ELSE 1 END, VALUE; -- если честно не совсем понимаю почему и как оно работает это не буливые 1 и 0 получается 
-- в первой части мы к группе 0 присваеваем все что >0 а остольные к группе 1 а после end сортируем value по порядку. 
SELECT * FROM storehouses_products ORDER BY IF (value > 0, 0, 1), value;-- Тут тоже самое только через if Получается ORDER BY создает промежуточные группы и потом их отоброжает по порядку ?

-- 4) (по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. Месяцы заданы в виде списка английских названий ('may', 'august')
SELECT name, BIRTHDAY_AT FROM USERS
WHERE BIRTHDAY_AT LIKE 'may' OR BIRTHDAY_AT LIKE 'august';

-- 5) (по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. SELECT * FROM catalogs WHERE id IN (5, 1, 2); Отсортируйте записи в порядке, заданном в списке IN.
SELECT * FROM catalogs WHERE id IN (5, 1, 2) ORDER BY FIND_IN_SET(id, '5,1,2');

/*
1)Подсчитайте средний возраст пользователей в таблице users
2)Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. Следует учесть, что необходимы дни недели текущего года, а не года рождения.
3)(по желанию) Подсчитайте произведение чисел в столбце таблицы
*/

-- 1)Подсчитайте средний возраст пользователей в таблице users
SELECT SUM(TIMESTAMPDIFF(YEAR, birthday_at, NOW())) / COUNT(*) AS average FROM users;

-- 2)Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. Следует учесть, что необходимы дни недели текущего года, а не года рождения.
SELECT
	COUNT(*) AS total,
	WEEKDAY(CONCAT(YEAR(NOW()),SUBSTR(birthday_at, 5))) AS week_day
FROM users
GROUP BY week_day;

-- 3)(по желанию) Подсчитайте произведение чисел в столбце таблицы
SELECT ROUND(EXP(SUM(LOG(id)))) as composition from USERS;




